help(map)
library(purrr)
help(map)
# Import library `purrr` to get functional programs like map
library(purrr)
# Import library `latex2exp` to add equations to plot
library(latex2exp)
#GLOBAL CONSTANTS
POP_MEAN <- 0
POP_STD <- 1
NUMBER_OF_DATASETS <- 10000
CHUNKS <- c(10, 100, 1000, 10000)
Q1A_FILENAME <- "hw1_q1_partA.png"
# sizeN_dataset: int -> vector
# generate a size `n' data set with n datapoints, where P(X=1)=P(X=-1) = 1/2
sizeN_dataset <- function(n){
sample <- runif(n, min = 0 , max = 1)
for(i in 1:length(sample)){
if (sample[i] < 1/2){
sample[i]<- -1
}
else{
sample[i]<- 1
}
}
return (sample)
}
# get_datasets: int int -> [list-of vectors]
# generate `num_of_sets' different data-sets of size `n'
get_datasets <- function(num_of_sets, n){
map_vector <- rep(n,num_of_sets)
return (map(map_vector,sizeN_dataset))
}
# samplemMean_diff: int int int -> [vector-of mean]
# returns the difference between each data-sets sample mean and the true population mean
sampleMean_diff <- function(n, num_of_sets= NUMBER_OF_DATASETS, pop_mean = POP_MEAN){
datasets <- get_datasets(num_of_sets,n)
return (map(datasets,function (X) sum(X)/n-pop_mean))
sampleMean_diff(10)
)
sampleMean_diff <- function(n, num_of_sets= NUMBER_OF_DATASETS, pop_mean = POP_MEAN){
datasets <- get_datasets(num_of_sets,n)
return (map(datasets,function (X) sum(X)/n-pop_mean))}
sampleMean_diff(10)
x=sampleMean_diff(10)
length(x)
x[[1]]
#problem1a_plot: string int [vector-of int] int -> image
#plots the difference between the sample_mean(n) and true population mean vs log(n).
problem1a_plot <-function(filename=Q1A_FILENAME, i=1, chunks=CHUNKS){
#Get data to plot
sample_values <- map_dbl(chunks,function (n) sampleMean_diff(n)[i])
log_values <- map_dbl(chunks,log10)
#Get range of y-values since one series has a smaller range than the other
yrange<-range(c(sample_values,log_values))
# Give the chart file a name.
png(file = filename)
# Plot the bar chart.
plot(log_values,type = "o",col = "red", xlab = "n", ylab = "f(n)", ylim=yrange, xaxt="n",
main = TeX(paste("$\\log_{10}(n)$ vs $\\bar{X}^{(",i,")}_{n} - \\mu$",sep ="")))
#Change x-axis to reflect chunks
axis(1, at=1:length(chunks), labels=chunks)
lines(sample_values, type = "o", col = "blue")
# Add a legend
legend("center", legend=c("log(n)", TeX(paste("$\\bar{X}^{(",i,")}_{n} - \\mu$",sep =""))), text.col = c("red", "blue"))
# Save the file.
graphics.off()
}
problem1a_plot()
map_dbl(CHUNKS,function (n) sampleMean_diff(n)[1])
map(CHUNKS,function (n) sampleMean_diff(n)[1])
sample_values <- map(CHUNKS,function (n) sampleMean_diff(n)[1])
sample_values
x
x[0]
x[1]
x[[2]]
problem1a_plot <-function(filename=Q1A_FILENAME, i=1, chunks=CHUNKS){
#Get data to plot
sample_values <- map(chunks,function (n) sampleMean_diff(n)[[i]])
log_values <- map_dbl(chunks,log10)
#Get range of y-values since one series has a smaller range than the other
yrange<-range(c(sample_values,log_values))
# Give the chart file a name.
png(file = filename)
# Plot the bar chart.
plot(log_values,type = "o",col = "red", xlab = "n", ylab = "f(n)", ylim=yrange, xaxt="n",
main = TeX(paste("$\\log_{10}(n)$ vs $\\bar{X}^{(",i,")}_{n} - \\mu$",sep ="")))
#Change x-axis to reflect chunks
axis(1, at=1:length(chunks), labels=chunks)
lines(sample_values, type = "o", col = "blue")
# Add a legend
legend("center", legend=c("log(n)", TeX(paste("$\\bar{X}^{(",i,")}_{n} - \\mu$",sep =""))), text.col = c("red", "blue"))
# Save the file.
graphics.off()
}
sample_values <- map(CHUNKS,function (n) sampleMean_diff(n)[[1]])
sample_values
sample_values <- map_dbl(CHUNKS,function (n) sampleMean_diff(n)[[1]])
sample_values
sample_abs_mean <-function(e, chunks=CHUNKS){
sample_values <- map_dbl(chunks, function (n) indicator(sampleMean_diff(n),e))
}
indicator <- (function (vals, e)  as.numeric(vals>e))
sample_abs_mean <-function(e, chunks=CHUNKS){
sample_values <- map_dbl(chunks, function (n) indicator(sampleMean_diff(n),e))
}
sample_abs_mean(0.5)
indicator(sampleMean_diff(n),0.5)
sampleMean_diff(n)
sampleMean_diff(10)
x
x[1]
n=100
n
indicator(sampleMean_diff(n),0.5)
sample_means<-sampleMean_diff(n)
sample_means
sample_means
e
e = 0.5
map(sample_means, function (vals) indicator(vals, e))
map_dbl(sample_means, function (vals) indicator(vals, e))
x = map_dbl(sample_means, function (vals) indicator(vals, e))
x[1]
x[4]
x[99]
x[999]
max(x)
min(x)
max(sample_means)
sample_means
indicator(1,.5)
sample_means
sample_means[1]
sample_means
sample_means[1]
sample_means[[1][]
sample_means[[1]]
map_dbl(sample_means, function (vals) indicator(vals[1], e))
max(map_dbl(sample_means, function (vals) indicator(vals[1], e)))
e
map_dbl(sample_means, function (vals) indicator(vals[1], .1))
x = map_dbl(sample_means, function (vals) indicator(vals[1], .1))
x[999]
x[991]
x[993]
x[961]
x[962]
x[964]
sample_means[5]
x[5]
sample_means[9]
sample_means[100]
indicator(sampleMean_diff(n),0.01)
xx=indicator(sampleMean_diff(n),0.01)
xx[1]
sampleMean_diff[1]
sample_means[1]
sample_means[1][1]
sum(map_dbl(sample_means, function (vals) indicator(vals[1], .1)))
sum(map_dbl(sample_means, function (vals) indicator(vals[1], .1)))
sum(map_dbl(sample_means, function (vals) indicator(vals[1], .1)))
sum(map_dbl(sample_means, function (vals) indicator(vals[1], .05)))
sum(map_dbl(sample_means, function (vals) indicator(vals[1], .5)))
sample_abs_mean <-function(e, n){
means<-sampleMean_diff(n)
abs_means <- sum(map_dbl(sample_means, function (vals) indicator(vals[1], e)))
return (abs_means)
}
x = sample_abs_mean(.5, 100)
x
x = sample_abs_mean(.5, 10000)
x
sampleMean_diff <- function(e, chunks = CHUNKS)
{
return (map_dbl(chunks, function (n) sample_abs_mean(e,n)))
}
# totalsample_abs_mean: float [vector-of int] -> [vector-of float]
# returns the vector of length(chunks) representing the average abs mean over the `NUMBER_OF_DATASETS` with
# each entry representing the the average over datasets of size chunk[i]
totalsample_abs_mean <- function(e, chunks = CHUNKS)
{
return (map_dbl(chunks, function (n) sample_abs_mean(e,n)))
}
totalsample_abs_mean(.5)
sample_abs_mean(.5,1000)
sample_abs_mean(.5,100)
remove(xx)
sample_abs_mean(.5,100)
means = sampleMean_diff(100)
sampleMean_diff(1)
sampleMean_diff(5)
##install "affy" package from bioconductor
source("http://www.bioconductor.org/biocLite.R")
biocLite("affy")
##biocLite("BiocUpgrade") ##update already installed packages
library(affy)  ##load affy package ## detach(package:affy) to unload
datadir <- "/Users/jon/stat465W19/class/AffyData/prostateCancer/classdata"
fnames <- dir(path=datadir, pattern=".CEL")
pcraw <- ReadAffy(filenames=fnames,celfile.path=datadir)
sampleNames(pcraw) <- c("N1","N2","N3","N4","N5","N6","T1","T2","T3","T4","T5","T6")
pc <- rma(pcraw)  ##robust microarray average, fast but less versertile
setwd("/Users/jon/stat465W19/class/AffyData/prostateCancer/classdata")
write.exprs(pc,"pstCancer.txt")  ##output the normalized gene expression data to local hard drive.
## if you don't use setwd, you could do
## write.exprs(pc,"/Users/jon/stat465W19/class/AffyData/prostateCancer/classdata/pstCancer.txt")
pc=read.table("pstCancer.txt")
boxplot(pc,col = c(rep(2, 6),rep(3, 6)))
datadir <- "../data"
fnames <- dir(path=datadir, pattern=".CEL")
pcraw <- ReadAffy(filenames=fnames,celfile.path=datadir)
sampleNames(pcraw) <- c("N1","N2","N3","N4","N5","N6","T1","T2","T3","T4","T5","T6")
pc <- rma(pcraw)  ##robust microarray average, fast but less versertile
datadir <- "../data"
fnames <- dir(path=datadir, pattern=".CEL")
fnames
ls
getwd()
help("merge")
help(missForest)
help("read.table")
cat = c("A","B","A","B","A","B")
var1 = c(2,3,4,1,6,5)
year = c(2012,2012,2013,2013,2014,2014)
var2 = c(5,1,3,6,4,2)
var3 = c(6,3,1,5,4,2)
df8 = data.frame(cat,var1,year,var2,var3)
result <- df%>% select(car, var1,year,var2) %>% group_by(cat) %>% mutate_at(.vars = vars(var1, var2), funs(. -lag(.)))
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
result <- df%>% select(car, var1,year,var2) %>% group_by(cat) %>% mutate_at(.vars = vars(var1, var2), funs(. -lag(.)))
result <- df%>% select(car, var1,year,var2) %>% group_by(cat) %>% mutate_at(.vars = vars(var1, var2), funs(. -lag(.)))
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
result <- df%>% select(car, var1,year,var2) %>% group_by(cat) %>% mutate_at(.vars = vars(var1, var2), funs(. -lag(.)))
result <- df%>% select(car, var1,year,var2) %>% group_by(cat) %>% mutate_at(.vars = vars(var1, var2), funs(. -lag(.)))
install.packages("stringdist")
codes = c("male","female")
i = amatch(gener,codes)
i = amatch(gender,codes)
library(stringdist)
i = amatch(gender,codes)
help(amatch)
library(bnstruct)
#vectopattern: [vector-of int] string -> string
#concentates [vector-of x] to a single string using `delim' as delimiter
vectopattern<-function(ids, delim = "|"){
for (i in 1:length(ids)){
if (i == 1){
string_ = ids[i]
}else if(i<length(ids)){
string_ = paste(string_," ",ids[i], sep = "")
}else{
string_ = paste(string_," ",ids[i],"\n", sep = "")
}
}
return (string_)
}
# data directory and image directory
cleandata.dir <- "../data/clean"
graphic.dir <- "../images"
# dataframes of interest
alzheimer.dta <- read.table(file.path(cleandata.dir,"alzheimer.txt"),sep="\t")
cte.dta <- read.table(file.path(cleandata.dir,"cte.txt"),sep="\t")
sambofra/bnstruct
cleandata.dir <- "../data/clean"
setwd("/Users/dominicanene/Google Drive/Northwestern/2018-2019/q2/bioinformatics/project/src")
graphic.dir <- "../images"
alzheimer.dta <- read.table(file.path(cleandata.dir,"alzheimer.txt"),sep="\t")
cte.dta <- read.table(file.path(cleandata.dir,"cte.txt"),sep="\t")
# Converts a dataframe to the timeseries format specified by `bnstruct`
get.timesSeries<- function(data, df.names, FUN){
# Takes `replicates` and just outputs generic names (rep1, rep2, ... , repk) for each of the replicates
get.ROWnames <-(function(replicates) (map_chr(1:length(replicates), (function(i) (paste("rep",i,sep=""))))))
# Takes all the names of the genes and appends _t to them to indicate the time interval
get.COLnames<- (function(genes, t) (map_chr(genes, (function(nm) (paste(nm,"_t",t,sep=""))))))
# orginal gene names
genes = rownames(data)
discetenes = rep('c',length(genes))
node.sizes = rep(10,length(genes))
#loop over names concenate into conforming dataframe w/ generic lables
for (t in 1:length(df.names)){
print(t)
oldNames <- FUN(unlist(df.names[t])) #Replace w/ FUN and df.names
df = data[,oldNames]
rNames <- get.ROWnames(oldNames)
cNames <- get.COLnames(rownames(df),t)
# Take the transpose of the dataframe and standardize the names.
df = t(df)
colnames(df) = cNames
rownames(df) = rNames
if (t == 1){
df.output = df
}else{
df.output = cbind.fill(df.output,df, fill=NA)
}
}
# write the data
out = file(file.path(cleandata.dir,"gene.data"), open = 'w')
writeLines(apply(df.output,1,vectopattern), out, sep="")
close(out)
# write the header
out = file(file.path(cleandata.dir,"gene.header"), open ='w')
cat(vectopattern(genes),file=out)
print(length(genes))
close(out)
out = file(file.path(cleandata.dir,"gene.header"),open = 'a')
cat(vectopattern(node.sizes),file=out)
close(out)
out = file(file.path(cleandata.dir,"gene.header"), open ='a')
cat(vectopattern(discetenes),file=out)
close(out)
}
install.packages("arules")
# Converts a dataframe to the timeseries format specified by `bnstruct`
get.timesSeries<- function(data, df.names, FUN){
# Takes `replicates` and just outputs generic names (rep1, rep2, ... , repk) for each of the replicates
get.ROWnames <-(function(replicates) (map_chr(1:length(replicates), (function(i) (paste("rep",i,sep=""))))))
# Takes all the names of the genes and appends _t to them to indicate the time interval
get.COLnames<- (function(genes, t) (map_chr(genes, (function(nm) (paste(nm,"_t",t,sep=""))))))
# orginal gene names
genes = rownames(data)
discetenes = rep('c',length(genes))
node.sizes = rep(10,length(genes))
#loop over names concenate into conforming dataframe w/ generic lables
for (t in 1:length(df.names)){
print(t)
oldNames <- FUN(unlist(df.names[t])) #Replace w/ FUN and df.names
df = data[,oldNames]
rNames <- get.ROWnames(oldNames)
cNames <- get.COLnames(rownames(df),t)
# Take the transpose of the dataframe and standardize the names.
df = t(df)
colnames(df) = cNames
rownames(df) = rNames
if (t == 1){
df.output = df
}else{
df.output = cbind.fill(df.output,df, fill=NA)
}
}
# write the data
out = file(file.path(cleandata.dir,"gene.data"), open = 'w')
writeLines(apply(df.output,1,vectopattern), out, sep="")
close(out)
# write the header
out = file(file.path(cleandata.dir,"gene.header"), open ='w')
cat(vectopattern(genes),file=out)
print(length(genes))
close(out)
out = file(file.path(cleandata.dir,"gene.header"),open = 'a')
cat(vectopattern(node.sizes),file=out)
close(out)
out = file(file.path(cleandata.dir,"gene.header"), open ='a')
cat(vectopattern(discetenes),file=out)
close(out)
}
continous.to.discrete<-function(df, k = 10){
colNAME = colnames(df)
rowNAME =  rownames(df)
return.df = discretizeDF(data.frame(t(df)), default = list(method = "cluster", breaks = k))
return.df = sapply(return.df, as.numeric)
return.df = t(return.df)
colnames(return.df) = colNAME
rownames(return.df) = rowNAME
return (return.df)
}
ah.names.23Months = list("GSM252558" = "23Months_9",
"GSM252557" = "23Months_8",
"GSM252556" = "23Months_7",
"GSM252555" = "23Months_6",
"GSM252554" = "23Months_5",
"GSM252553" = "23Months_4",
"GSM252552" = "23Months_3",
"GSM252551" = "23Months_15",
"GSM252550" = "23Months_14",
"GSM252549" = "23Months_13",
"GSM252548" = "23Months_11",
"GSM252547" = "23Months_10",
"GSM252546" = "23Months_1")
ah.names.12Months = list("GSM252545" = "12Months_9",
"GSM252544" = "12Months_8",
"GSM252543" = "12Months_7",
"GSM252542" = "12Months_6",
"GSM252541" = "12Months_5",
"GSM252540" = "12Months_4",
"GSM252539" = "12Months_3",
"GSM252538" = "12Months_2",
"GSM252537" = "12Months_1")
ah.names.9Months = list("GSM252536" = "9Months_9",
"GSM252535" = "9Months_8",
"GSM252534" = "9Months_7",
"GSM252533" = "9Months_6",
"GSM252532" = "9Months_5",
"GSM252531" = "9Months_4",
"GSM252530" = "9Months_3",
"GSM252529" = "9Months_2",
"GSM252528" = "9Months_1")
ah.names.6Months = list("GSM252527" = "6Months_9",
"GSM252526" = "6Months_8",
"GSM252525" = "6Months_7",
"GSM252524" = "6Months_6",
"GSM252523" = "6Months_5",
"GSM252522" = "6Months_4",
"GSM252521" = "6Months_3",
"GSM252520" = "6Months_2",
"GSM252519" = "6Months_1")
ah.names.3Months = list("GSM252518" = "3Months_9",
"GSM252517" = "3Months_8",
"GSM252516" = "3Months_7",
"GSM252515" = "3Months_6",
"GSM252514" = "3Months_5",
"GSM252513" = "3Months_4",
"GSM252512" = "3Months_3",
"GSM252511" = "3Months_2",
"GSM252510" = "3Months_1")
cte.names.30m = list("GSM44533" = "JMR-RatInj30m-5aA-s2",
"GSM44500" =  "JMR-RatInj30m-1aA-s2",
"GSM44492" = "JMR-RatInj30m-3aA-s2",
"GSM44480" = "JMR-RatInj30m-4aA-s2",
"GSM44473" = "JMR-RatInj30m-2aA-s2")
cte.names.4h = list("GSM44667" = "JMR-RatInj4h-2bA-s2",
"GSM44498" = "JMR-RatInj4h-3bA-s2",
"GSM44466" = "JMR-RatInj4h-1bA-s2")
cte.names.8h = list("GSM44532" = "JMR-RatInj8h-1aA-s2",
"GSM44531" = "JMR-RatInj8h-2aA-s2",
"GSM44491" = "JMR-RatInj8h-3aA-s2")
cte.names.24h = list("GSM44493" = "JMR-RatInj24hf-2aA-s2",
"GSM44482" = "JMR-RatInj24hf-3aA-s2",
"GSM44477" =  "JMR-RatInj24hf-1aA-s2")
cte.names.72h = list("GSM44549" = "JMR-RatInj72h-3aA-s2",
"GSM44520" = "JMR-RatInj72h-1aA-s2",
"GSM44484" = "JMR-RatInj72h-2aA-s2")
cte.names.21d = list("GSM44497" = "JMR-RatInj21d-1bA-s2",
"GSM44481" = "JMR-RatInj21d-2aA-s2",
"GSM44471" = "JMR-RatInj21d-3aA-s2")
continous.to.discrete<-function(df, k = 10){
colNAME = colnames(df)
rowNAME =  rownames(df)
return.df = arules::discretizeDF(data.frame(t(df)), default = list(method = "cluster", breaks = k))
return.df = sapply(return.df, as.numeric)
return.df = t(return.df)
colnames(return.df) = colNAME
rownames(return.df) = rowNAME
return (return.df)
}
